// Code generated by MockGen. DO NOT EDIT.
// Source: ../api/types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	api "mosn.io/pkg/wasm/api"
	reflect "reflect"
)

// MockWasmVM is a mock of WasmVM interface.
type MockWasmVM struct {
	ctrl     *gomock.Controller
	recorder *MockWasmVMMockRecorder
}

// MockWasmVMMockRecorder is the mock recorder for MockWasmVM.
type MockWasmVMMockRecorder struct {
	mock *MockWasmVM
}

// NewMockWasmVM creates a new mock instance.
func NewMockWasmVM(ctrl *gomock.Controller) *MockWasmVM {
	mock := &MockWasmVM{ctrl: ctrl}
	mock.recorder = &MockWasmVMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmVM) EXPECT() *MockWasmVMMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockWasmVM) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockWasmVMMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockWasmVM)(nil).Name))
}

// Init mocks base method.
func (m *MockWasmVM) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockWasmVMMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockWasmVM)(nil).Init))
}

// NewModule mocks base method.
func (m *MockWasmVM) NewModule(wasmBytes []byte) api.WasmModule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewModule", wasmBytes)
	ret0, _ := ret[0].(api.WasmModule)
	return ret0
}

// NewModule indicates an expected call of NewModule.
func (mr *MockWasmVMMockRecorder) NewModule(wasmBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewModule", reflect.TypeOf((*MockWasmVM)(nil).NewModule), wasmBytes)
}

// MockWasmModule is a mock of WasmModule interface.
type MockWasmModule struct {
	ctrl     *gomock.Controller
	recorder *MockWasmModuleMockRecorder
}

// MockWasmModuleMockRecorder is the mock recorder for MockWasmModule.
type MockWasmModuleMockRecorder struct {
	mock *MockWasmModule
}

// NewMockWasmModule creates a new mock instance.
func NewMockWasmModule(ctrl *gomock.Controller) *MockWasmModule {
	mock := &MockWasmModule{ctrl: ctrl}
	mock.recorder = &MockWasmModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmModule) EXPECT() *MockWasmModuleMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockWasmModule) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockWasmModuleMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockWasmModule)(nil).Init))
}

// NewInstance mocks base method.
func (m *MockWasmModule) NewInstance() api.WasmInstance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewInstance")
	ret0, _ := ret[0].(api.WasmInstance)
	return ret0
}

// NewInstance indicates an expected call of NewInstance.
func (mr *MockWasmModuleMockRecorder) NewInstance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewInstance", reflect.TypeOf((*MockWasmModule)(nil).NewInstance))
}

// GetABINameList mocks base method.
func (m *MockWasmModule) GetABINameList() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetABINameList")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetABINameList indicates an expected call of GetABINameList.
func (mr *MockWasmModuleMockRecorder) GetABINameList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetABINameList", reflect.TypeOf((*MockWasmModule)(nil).GetABINameList))
}

// MockWasmInstance is a mock of WasmInstance interface.
type MockWasmInstance struct {
	ctrl     *gomock.Controller
	recorder *MockWasmInstanceMockRecorder
}

// MockWasmInstanceMockRecorder is the mock recorder for MockWasmInstance.
type MockWasmInstanceMockRecorder struct {
	mock *MockWasmInstance
}

// NewMockWasmInstance creates a new mock instance.
func NewMockWasmInstance(ctrl *gomock.Controller) *MockWasmInstance {
	mock := &MockWasmInstance{ctrl: ctrl}
	mock.recorder = &MockWasmInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmInstance) EXPECT() *MockWasmInstanceMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockWasmInstance) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockWasmInstanceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockWasmInstance)(nil).Start))
}

// Stop mocks base method.
func (m *MockWasmInstance) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockWasmInstanceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockWasmInstance)(nil).Stop))
}

// RegisterFunc mocks base method.
func (m *MockWasmInstance) RegisterFunc(namespace, funcName string, f interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterFunc", namespace, funcName, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterFunc indicates an expected call of RegisterFunc.
func (mr *MockWasmInstanceMockRecorder) RegisterFunc(namespace, funcName, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterFunc", reflect.TypeOf((*MockWasmInstance)(nil).RegisterFunc), namespace, funcName, f)
}

// GetExportsFunc mocks base method.
func (m *MockWasmInstance) GetExportsFunc(funcName string) (api.WasmFunction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExportsFunc", funcName)
	ret0, _ := ret[0].(api.WasmFunction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExportsFunc indicates an expected call of GetExportsFunc.
func (mr *MockWasmInstanceMockRecorder) GetExportsFunc(funcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExportsFunc", reflect.TypeOf((*MockWasmInstance)(nil).GetExportsFunc), funcName)
}

// GetExportsMem mocks base method.
func (m *MockWasmInstance) GetExportsMem(memName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExportsMem", memName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExportsMem indicates an expected call of GetExportsMem.
func (mr *MockWasmInstanceMockRecorder) GetExportsMem(memName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExportsMem", reflect.TypeOf((*MockWasmInstance)(nil).GetExportsMem), memName)
}

// GetMemory mocks base method.
func (m *MockWasmInstance) GetMemory(addr, size uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemory", addr, size)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemory indicates an expected call of GetMemory.
func (mr *MockWasmInstanceMockRecorder) GetMemory(addr, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemory", reflect.TypeOf((*MockWasmInstance)(nil).GetMemory), addr, size)
}

// PutMemory mocks base method.
func (m *MockWasmInstance) PutMemory(addr, size uint64, content []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMemory", addr, size, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMemory indicates an expected call of PutMemory.
func (mr *MockWasmInstanceMockRecorder) PutMemory(addr, size, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMemory", reflect.TypeOf((*MockWasmInstance)(nil).PutMemory), addr, size, content)
}

// GetByte mocks base method.
func (m *MockWasmInstance) GetByte(addr uint64) (byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByte", addr)
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByte indicates an expected call of GetByte.
func (mr *MockWasmInstanceMockRecorder) GetByte(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByte", reflect.TypeOf((*MockWasmInstance)(nil).GetByte), addr)
}

// PutByte mocks base method.
func (m *MockWasmInstance) PutByte(addr uint64, b byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutByte", addr, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutByte indicates an expected call of PutByte.
func (mr *MockWasmInstanceMockRecorder) PutByte(addr, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutByte", reflect.TypeOf((*MockWasmInstance)(nil).PutByte), addr, b)
}

// GetUint32 mocks base method.
func (m *MockWasmInstance) GetUint32(addr uint64) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUint32", addr)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUint32 indicates an expected call of GetUint32.
func (mr *MockWasmInstanceMockRecorder) GetUint32(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUint32", reflect.TypeOf((*MockWasmInstance)(nil).GetUint32), addr)
}

// PutUint32 mocks base method.
func (m *MockWasmInstance) PutUint32(addr uint64, value uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutUint32", addr, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutUint32 indicates an expected call of PutUint32.
func (mr *MockWasmInstanceMockRecorder) PutUint32(addr, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutUint32", reflect.TypeOf((*MockWasmInstance)(nil).PutUint32), addr, value)
}

// Malloc mocks base method.
func (m *MockWasmInstance) Malloc(size int32) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Malloc", size)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Malloc indicates an expected call of Malloc.
func (mr *MockWasmInstanceMockRecorder) Malloc(size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Malloc", reflect.TypeOf((*MockWasmInstance)(nil).Malloc), size)
}

// GetData mocks base method.
func (m *MockWasmInstance) GetData() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetData indicates an expected call of GetData.
func (mr *MockWasmInstanceMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockWasmInstance)(nil).GetData))
}

// SetData mocks base method.
func (m *MockWasmInstance) SetData(data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetData", data)
}

// SetData indicates an expected call of SetData.
func (mr *MockWasmInstanceMockRecorder) SetData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetData", reflect.TypeOf((*MockWasmInstance)(nil).SetData), data)
}

// Acquire mocks base method.
func (m *MockWasmInstance) Acquire() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Acquire indicates an expected call of Acquire.
func (mr *MockWasmInstanceMockRecorder) Acquire() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockWasmInstance)(nil).Acquire))
}

// Release mocks base method.
func (m *MockWasmInstance) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release.
func (mr *MockWasmInstanceMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockWasmInstance)(nil).Release))
}

// Lock mocks base method.
func (m *MockWasmInstance) Lock(data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock", data)
}

// Lock indicates an expected call of Lock.
func (mr *MockWasmInstanceMockRecorder) Lock(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockWasmInstance)(nil).Lock), data)
}

// Unlock mocks base method.
func (m *MockWasmInstance) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockWasmInstanceMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockWasmInstance)(nil).Unlock))
}

// GetModule mocks base method.
func (m *MockWasmInstance) GetModule() api.WasmModule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModule")
	ret0, _ := ret[0].(api.WasmModule)
	return ret0
}

// GetModule indicates an expected call of GetModule.
func (mr *MockWasmInstanceMockRecorder) GetModule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModule", reflect.TypeOf((*MockWasmInstance)(nil).GetModule))
}

// HandleError mocks base method.
func (m *MockWasmInstance) HandleError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleError", err)
}

// HandleError indicates an expected call of HandleError.
func (mr *MockWasmInstanceMockRecorder) HandleError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleError", reflect.TypeOf((*MockWasmInstance)(nil).HandleError), err)
}

// MockWasmFunction is a mock of WasmFunction interface.
type MockWasmFunction struct {
	ctrl     *gomock.Controller
	recorder *MockWasmFunctionMockRecorder
}

// MockWasmFunctionMockRecorder is the mock recorder for MockWasmFunction.
type MockWasmFunctionMockRecorder struct {
	mock *MockWasmFunction
}

// NewMockWasmFunction creates a new mock instance.
func NewMockWasmFunction(ctrl *gomock.Controller) *MockWasmFunction {
	mock := &MockWasmFunction{ctrl: ctrl}
	mock.recorder = &MockWasmFunctionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmFunction) EXPECT() *MockWasmFunctionMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockWasmFunction) Call(args ...interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockWasmFunctionMockRecorder) Call(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockWasmFunction)(nil).Call), args...)
}
